version: 2.1

executors:
  nodejs:
    docker:
      - image: cimg/node:lts
  trivy:
    docker:
      - image: aquasec/trivy


jobs:
  linter:
    executor: nodejs
    steps:
      - checkout

      - restore_cache:
          keys:
            - node-v1-{{ checksum "package-lock.json" }}

      - run:
          name: Install dependencies
          command: npm ci

      - save_cache:
          key: node-v1-{{ checksum "package-lock.json" }}
          paths:
            - ~/.npm

      - run:
          name: Run linter
          command: npm run lint

  requirements_audit:
    executor: nodejs
    steps:
      - checkout

      - run:
          name: update-npm
          command: "npm install -g npm"

      - restore_cache:
          keys:
            - node-v1-{{ checksum "package-lock.json" }}

      - run:
          name: run-audit-ci
          command: npx audit-ci@^6 --config ./audit-ci.jsonc
  
      - run:
          name: install-npm
          command: "npm install --no-audit"

  nodejsscan:
    docker:
      - image: cimg/python:3.9.6
    steps:
      - checkout
      - run:
          name: Install njsscan
          command: pip install --upgrade njsscan
      - run:
           name: njsscan check
           command: njsscan .

  docker_build:
    docker: 
      - image: docker:20.10.17-git
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          paths:
            - /caches/app.tar
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true
      - run:
          name: Build application Docker image
          command: |
            docker build --cache-from=app -t testnuxtapp:latest .
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/app.tar testnuxtapp:latest
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/app.tar
      - persist_to_workspace:
          root: caches
          paths:
            - app.tar

  trivy_scan:
    executor: trivy
    steps:
      - attach_workspace:
          at: /caches
      - run:
          name: scan image
          command: |
            docker load -i /cahces/app.tar
            trivy --exit-code 0 --no-progress testnuxtapp:latest


  # werf_bundle_publish:
  #   machine:
  #     image: ubuntu-2004:202010-01
  #   steps:
  #     - run:
  #         name: install_werf
  #         command: |
  #           curl -sSLO https://werf.io/install.sh && \
  #           chmod +x install.sh && \
  #           ./install.sh --ci && \
  #           source "$("/home/circleci/bin/trdl" use werf "1.2" "stable")" && \
  #           rm -f install.sh && \
  #           echo 'export PATH=$PATH:/home/circleci/bin' >> ~/.bashrc

  #     - checkout

  #     # - run:
  #     #     name: docker-login
  #     #     command: docker login ghcr.io -u ${DOCKER_USER} -p ${DOCKER_PASSWORD}

  #     - run:
  #         name: build-and-publish
  #         command: |
  #           echo ${DOCKER_PASSWORD} | docker login ghcr.io -u ${DOCKER_USER} --password-stdin && \
  #           werf bundle publish --repo=ghcr.io/apirone/testnuxtapp \
  #             --repo-container-registry=github \
      

workflows:
  version: 2
  ci:
    jobs:
      - linter:
          filters:
            branches:
              only:
                - main
                - master
      - requirements_audit:
          requires:
            - linter
      - nodejsscan:
          requires:
            - linter
      - docker_build:
          requires:
            - nodejsscan
      - trivy_scan:
          requires:
            - docker_build
      #- werf_bundle_publish
          # requires:
          #   - nodejsscan
